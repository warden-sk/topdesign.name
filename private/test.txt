function findRight(price: number, ks: number): number {
  const i = $.findIndex(($$, j) => {
    const l = $$[0];

    const r = $?.[j + 1]?.[0] ?? Number.MAX_SAFE_INTEGER;

    return ks >= l && ks < r;
  });

  if (i !== -1) {
    const percentage = $[i][1];

    const cenaZaKus = (price / 100) * percentage;

    return +(cenaZaKus * ks).toFixed(2);
  }

  return 0;
}






      function Kktko({ onDelete, onPrice }: { onDelete: () => void; onPrice: (price: [number, number]) => void }) {
        const [currentProduct, updateCurrentProduct] = React.useState<Product>(productStorage[0]);
        const [ks, updateKs] = React.useState<number>(50);

        const [accessories, updateAccessories] = React.useState<Set<Option>>(new Set());

        const sumAc = [...accessories].reduce((partialSum, a) => partialSum + a.price, 0);

        const id = React.useId();

        function on(ks: number) {
          updateKs(ks);

          onPrice([findRight(currentProduct.price + sumAc, ks), ks]);
        }

        React.useEffect(() => {
          on(ks);

          updateAccessories(() => new Set());
        }, [currentProduct.name]);

        React.useEffect(() => {
          on(ks);
        }, [accessories.size]);

        return (
          <div className="product" p="4">
            <div fontWeight="600">Produkty</div>
            <div mX="!2" mY="4">
              {productStorage.map(product => (
                <div
                  className={['product__name', { product__name_active: product.name === currentProduct?.name }]}
                  cursor="pointer"
                  onClick={() => updateCurrentProduct(product)}
                  p="2"
                >
                  {product.options.length > 0
                    ? `${product.name} \u2014 ${plural(product.options.length, ['možnosť', 'možnosti', 'možností'])} na výber`
                    : product.name}
                </div>
              ))}
            </div>
            <div alignItems="center" display="flex" mY="4" spaceX="4">
              <label cursor="pointer" fontWeight="600" htmlFor={`ks-${id}`} width="4/12">
                Počet kusov
              </label>
              <input id={`ks-${id}`} onChange={e => on(+e.currentTarget.value)} p="2" type="text" value={ks} width="8/12" />
            </div>
            {currentProduct.options.length > 0 && (
              <>
                <div fontWeight="600">Možnosti</div>
                <div mX="!2" mY="4">
                  {currentProduct.options.map(option => {
                    return (
                      <div
                        className={['product__name', { product__name_active: accessories.has(option) }]}
                        cursor="pointer"
                        onClick={() => {
                          updateAccessories(accessories => {
                            if (accessories.has(option)) {
                              accessories.delete(option);

                              return new Set(accessories);
                            }

                            return new Set(accessories.add(option));
                          });
                        }}
                        p="2"
                      >
                        {option.name} {'\u2014'} {option.price} € bez DPH
                      </div>
                    );
                  })}
                </div>
              </>
            )}
            <div alignItems="center" display="flex" justifyContent="flex-end">
              {/*<div className="deleteButton" cursor="pointer" onClick={() => onDelete()}>*/}
              {/*  Odstrániť*/}
              {/*</div>*/}
              <div fontWeight="600">{findRight(currentProduct.price + sumAc, ks)} € bez DPH</div>
            </div>
          </div>
        );
      }








      <div display="none" flexWrap="wrap">
        {[...products].map(i => (
          <div p="2" width="4/12">
            <Kktko
              onDelete={() => {
                updateProducts(products => {
                  products.delete(i);

                  return new Set(products);
                });
              }}
              onPrice={price => {
                updatePriceS(priceS => {
                  priceS[i] = price;

                  return [...priceS];
                });
              }}
            />
          </div>
        ))}
      </div>
      <div fontWeight="600" p="4" textAlign="center">
        {sumPrice.toFixed(2)} € bez DPH za {plural(sumKs, ['kus', 'kusy', 'kusov'])}
      </div>